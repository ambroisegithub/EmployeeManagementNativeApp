import { StyleSheet, Text, View, FlatList } from "react-native";
import React from "react";

const SearchResults = ({ data, input, setInput }) => {
  return (
    <View style={{ padding: 10 }}>
      <FlatList
        data={data}
        renderItem={({ item }) => {
          if (item?.employeeName.toLowerCase().includes(input.toLowerCase())) {
            return (
              <View
                style={{ marginVertical: 10, gap: 10, flexDirection: "row" }}
              >
                <View
                  style={{
                    width: 50,
                    height: 50,
                    borderRadius: 8,
                    padding: 10,
                    backgroundColor: "#4b6cb7",
                    alignItems: "center",
                    justifyContent: "center",
                  }}
                >
                  <Text style={{ color: "white", fontSize: 16 }}>
                    {item?.employeeName?.charAt(0)}
                  </Text>
                </View>

                <View>
                  <Text style={{ fontSize: 16, fontWeight: "bold" }}>
                    {item?.employeeName}
                  </Text>
                  <Text style={{ marginTop: 5, color: "gray" }}>
                    {item?.designation} ({item?.employeeId})
                  </Text>
                </View>
              </View>
            );
          }
        }}
      />
    </View>
  );
};

export default SearchResults;

const styles = StyleSheet.create({});



























import { Pressable, StyleSheet, Text, View, TextInput } from "react-native";
import React, { useEffect, useState } from "react";
import axios from "axios";
import { Ionicons } from "@expo/vector-icons";
import { AntDesign } from "@expo/vector-icons";
import { useRouter } from "expo-router";
import SearchResults from "../../components/SearchResults";

const employees = () => {
  const [employees, setEmployees] = useState([]);
  const [input, setInput] = useState("");
  const router = useRouter();
  useEffect(() => {
    const fetchEmployeeData = async () => {
      try {
        const response = await axios.get("https://nativeemployeeapp.onrender.com/employees");
        setEmployees(response.data);
      } catch (error) {
        console.log("error fetching employee data", error);
      }
    };
    fetchEmployeeData();
  }, []);
  console.log(employees);
  return (
    <View style={{ flex: 1, backgroundColor: "white" }}>
      <View
        style={{
          flexDirection: "row",
          alignItems: "center",
          backgroundColor: "white",
        }}
      >
        <Ionicons
          onPress={() => router.back()}
          style={{ marginLeft: 10 }}
          name="arrow-back"
          size={24}
          color="black"
        />
        <Pressable
          style={{
            flexDirection: "row",
            alignItems: "center",
            marginHorizontal: 7,
            gap: 10,
            backgroundColor: "white",
            borderRadius: 3,
            height: 40,
            flex: 1,
          }}
        >
          <AntDesign
            style={{ marginLeft: 10 }}
            name="search1"
            size={20}
            color="black"
          />
          <TextInput
            value={input}
            onChangeText={(text) => setInput(text)}
            style={{ flex: 1 }}
            placeholder="Search"
          />

          {employees.length > 0 && (
            <View>
              <Pressable onPress={() => router.push("/(home)/adddetails")}>
                <AntDesign name="pluscircle" size={30} color="#0072b1" />
              </Pressable>
            </View>
          )}
        </Pressable>
      </View>

      {employees.length > 0 ? (
        <SearchResults data={employees} input={input} setInput={setInput} />
      ) : (
        <View
          style={{ flex: 1, justifyContent: "center", alignItems: "center" }}
        >
          <Text>No Data</Text>
          <Text>Press on the plus button and add your Employee</Text>
          <Pressable onPress={() => router.push("/(home)/adddetails")}>
            <AntDesign
              style={{ marginTop: 30 }}
              name="pluscircle"
              size={24}
              color="black"
            />
          </Pressable>
        </View>
      )}
    </View>
  );
};

export default employees;

const styles = StyleSheet.create({});



















import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  Modal,
  TextInput,
  Button,
  Alert,
  StyleSheet,
} from "react-native";
import axios from "axios";

const EmployeeSalary = () => {
  const [employees, setEmployees] = useState([]);
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [salaryAmount, setSalaryAmount] = useState("");
  const [isPaymentModalVisible, setIsPaymentModalVisible] = useState(false);

//   useEffect(() => {
//     // Fetch all employees
//     const fetchEmployees = async () => {
//       try {
//         const response = await axios.get(
//           "https://nativeemployeeapp.onrender.com/employees"
//         );
//         setEmployees(response.data);
//       } catch (error) {
//         console.log("Error fetching employee data", error);
//       }
//     };

//     fetchEmployees();
//   }, []);

  // Fetch employees with pending status
  const fetchPendingEmployees = async () => {
    try {
      const response = await axios.get(
        "https://nativeemployeeapp.onrender.com/employees/pending"
      );
      setEmployees(response.data);
    } catch (error) {
      console.log("Error fetching pending employee data", error);
    }
  };

  const handlePayButtonPress = (employee) => {
    setSelectedEmployee(employee);
    setIsPaymentModalVisible(true);
  };

  const handleConfirmPayment = async () => {
    try {
      const response = await axios.post(
        "https://nativeemployeeapp.onrender.com/salaryPayment",
        {
          employeeId: selectedEmployee.employeeId,
          month: new Date().getMonth() + 1,
          year: new Date().getFullYear(),
          amount: parseFloat(salaryAmount),
          paymentDate: new Date(),
        }
      );

      console.log(response.data.message);

      // Update the status to "paid" after successful payment
      const updatedEmployees = employees.map((employee) =>
        employee.employeeId === selectedEmployee.employeeId
          ? { ...employee, status: "paid" }
          : employee
      );

      setEmployees(updatedEmployees);

      setIsPaymentModalVisible(false);
      setSalaryAmount("");
      Alert.alert("Success", "Salary payment successful");
    } catch (error) {
      console.log("Error paying salary", error);
      Alert.alert("Error", "Failed to pay salary");
    }
  };

  return (
    <View>
      <View>
      <Text>
        <Button
          title="Fetch Pending Employees"
          onPress={fetchPendingEmployees}
        />
      </Text>{" "}
      </View>

      {/* Display Employee Data */}
      {employees.map((employee) => (
        <View key={employee.employeeId}>
          <Text>{employee.employeeName}</Text>
          <Text>Salary: ${employee.salary}</Text>
          <Text>Status: {employee.status}</Text> {/* Display status */}
          <Button
            title="Pay Salary"
            onPress={() => handlePayButtonPress(employee)}
          />
        </View>
      ))}
      {/* Salary Payment Modal */}
      <Modal
        visible={isPaymentModalVisible}
        animationType="slide"
        transparent={true}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Pay Salary</Text>
            <TextInput
              value={salaryAmount}
              onChangeText={(text) => setSalaryAmount(text)}
              style={styles.input}
              placeholder="Enter salary amount"
              keyboardType="numeric"
            />
            <Button title="Confirm Payment" onPress={handleConfirmPayment} />
            <Button
              title="Cancel"
              onPress={() => setIsPaymentModalVisible(false)}
            />
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  modalContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
  },
  modalContent: {
    backgroundColor: "white",
    padding: 20,
    borderRadius: 5,
    elevation: 5,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 10,
  },
  input: {
    borderWidth: 1,
    borderColor: "gray",
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
  },
});

export default EmployeeSalary;




  const handleConfirmPayment = async () => {
    try {
      const response = await axios.post(
        "https://nativeemployeeapp.onrender.com/salaryPayment",
        {
          employeeId: selectedEmployee.employeeId,
          month: new Date().getMonth() + 1,
          year: new Date().getFullYear(),
          amount: parseFloat(salaryAmount),
          paymentDate: new Date().toDateString(),
          status: "paid",
        }
      );

      console.log(response.data.message);

      // Update the status to "paid" after successful payment
      setEmployees((prevEmployees) =>
        prevEmployees.map((employee) =>
          employee.employeeId === selectedEmployee.employeeId
            ? { ...employee, status: "paid" }
            : employee
        )
      );

      setIsPaymentModalVisible(false);
      setSalaryAmount("");
      Alert.alert("Success", "Salary payment successful");
    } catch (error) {
      console.log("Error paying salary", error);
      Alert.alert("Error", "Failed to pay salary");
    }
  };





      <Modal
        visible={isPaymentModalVisible}
        animationType="slide"
        transparent={true}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Pay Salary</Text>
            <TextInput
              value={salaryAmount}
              onChangeText={(text) => setSalaryAmount(text)}
              style={styles.input}
              placeholder="Enter salary amount"
              keyboardType="numeric"
            />
            <TextInput
              value={(new Date().getMonth() + 1).toString()}
              editable={true}
              style={styles.input}
            />
            <TextInput
              value={new Date().getFullYear().toString()}
              editable={true}
              style={styles.input}
            />
            <TextInput
              value={new Date().toDateString()}
              editable={true}
              style={styles.input}
            />
            <TextInput value="paid" editable={true} style={styles.input} />
            <Button title="Confirm Payment" onPress={handleConfirmPayment} />
            <Button
              title="Cancel"
              onPress={() => setIsPaymentModalVisible(false)}
            />
          </View>
        </View>
      </Modal>
